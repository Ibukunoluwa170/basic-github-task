{
	"info": {
		"_postman_id": "5038c213-2719-4441-9576-6faee172a4f7",
		"name": "API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24240086"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.fusio-project.org/index.php/todo",
					"protocol": "https",
					"host": [
						"demo",
						"fusio-project",
						"org"
					],
					"path": [
						"index.php",
						"todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"pm.test(\"Status code should be 202\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name have OK string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Status code name have ok string\", function () {\r",
							"    pm.response.to.have.status(\"ok\");\r",
							"});\r",
							"pm.test(\"Status code name have OK string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"console.log(jsonData.title)\r",
							"console.log(jsonData.apiVersion)\r",
							"console.log(jsonData.paymentCurrency)\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Fusio\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"6.3.8.0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"paymentCurrency\");\r",
							"});\r",
							"\r",
							"pm.test(\"apiVersion equals 6.3.8.0\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\")\r",
							"});\r",
							"\r",
							"pm.test(\"title equals Fusio\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
							"});\r",
							"\r",
							"pm.test(\"paymentCurrency equals EUR\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.fusio-project.org/index.php/",
					"protocol": "https",
					"host": [
						"demo",
						"fusio-project",
						"org"
					],
					"path": [
						"index.php",
						""
					]
				},
				"description": "https://demo.fusio-project.org/index.php/"
			},
			"response": []
		},
		{
			"name": "Get entry per ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.fusio-project.org/index.php/todo/?todo_id=2",
					"protocol": "https",
					"host": [
						"demo",
						"fusio-project",
						"org"
					],
					"path": [
						"index.php",
						"todo",
						""
					],
					"query": [
						{
							"key": "todo_id",
							"value": "2"
						}
					]
				},
				"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
			},
			"response": []
		},
		{
			"name": "Get Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"// print any kind of variables/message on the screen\r",
							"console.log(response[2].name);\r",
							"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
							"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
							"});\r",
							"\r",
							"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
							"console.log(Fiction)\r",
							"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
							"\r",
							"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
							"\r",
							"console.log(Fiction[0].id);\r",
							"\r",
							"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
							"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
							"});\r",
							"\r",
							"pm.globals.set(\"bookId\", Fiction[0].id);\r",
							"\r",
							"pm.test(\"Status code should be 203\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(203);\r",
							"});\r",
							"pm.test(\"Status code name have ok string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Status code name have crated string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Status code name have ok string\", function () {\r",
							"    pm.response.to.have.status(\"ok\");\r",
							"});\r",
							"pm.test(\"Status code name have ok string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=fiction",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Place a book order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const OrderId = pm.response.json();\r",
							"\r",
							"console.log(OrderId.orderId);\r",
							"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
							"\r",
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be  200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status code name have an ok string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Status code name have created string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"console.log(jsonData.orderId)\r",
							"console.log(jsonData.created)\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"created equals true\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.created).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"xuMPyxGLnTaYLMpwTRZvs\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "cc78177afe6fc068018bb6d26c6ac98d0a6d45300799e3840ad339f7e4b7e347",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register member",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const OrderId = pm.response.json();\r",
							"\r",
							"console.log(OrderId.orderId);\r",
							"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"clientName\": \"ibukunoluwa\",\n  \"clientEmail\": \"ibkukuno1@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name have OK String\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Status code name have created string\", function () {\r",
							"    pm.response.to.have.status(\"Ok\");\r",
							"});\r",
							"pm.test(\"Status code name have OK string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							" console.log(jsonData)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "cc78177afe6fc068018bb6d26c6ac98d0a6d45300799e3840ad339f7e4b7e347",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code shuld be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code should be 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Status code should be 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name have ok string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Status code name have created string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Status code name have OK string\", function () {\r",
							"    pm.response.to.have.status(\"ok\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"console.log(jsonData.id)\r",
							"console.log(jsonData.bookId)\r",
							"console.log(customerName)\r",
							"\r",
							"pm.test(\"id equals lRVHcvpiB51lRaKpG1CkF \", function () {\r",
							"    \r",
							"    pm.expect(jsonData.id).to.eql(\"lRVHcvpiB51lRaKpG1CkF\");\r",
							"});\r",
							"pm.test(\"bookId equals 1\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.bookId).to.eql(1);\r",
							"});\r",
							"pm.test(\"costomerName equal John \", function () {\r",
							"    \r",
							"    pm.expect(jsonData.customerName).to.eql(\"John\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "cc78177afe6fc068018bb6d26c6ac98d0a6d45300799e3840ad339f7e4b7e347",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerName\": \"John\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "lRVHcvpiB51lRaKpG1CkF"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string OK\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "bl8ZbxUCq59bH8DyYWvjo"
						}
					]
				}
			},
			"response": []
		}
	]
}